%%writefile somaVetorial.cu

#include<stdio.h>
#include<time.h>
#include<stdlib.h>

__global__ void FazTudoInt (int *v1, int *v2 ,int *v3 , int *v4 )
{

	
  v2[blockIdx.x]=v2[blockIdx.x]+ v3[blockIdx.x];
  v4[blockIdx.x]=v2[blockIdx.x]* v4[blockIdx.x];
  v3[blockIdx.x]=v4[blockIdx.x]/ v3[blockIdx.x];
  v1[blockIdx.x]=v3[blockIdx.x]-50;
}


__global__ void add(int *a, int *b, int *soma) {
	soma[blockIdx.x] = a[blockIdx.x] + b[blockIdx.x];
}

__global__ void sub(int*a,int*b,int*sub){
  sub[blockIdx.x] = a[blockIdx.x] - b[blockIdx.x];
}



void random_ints(int *a, int N){
	int i;

	for (i=0;i < N; i++){
		a[i] = rand() % 100;
    printf("%3d ",a[i]);
	}
  puts("");
}



#define N 1000

int main(void) {
	int  *b, *c,*d , *soma ; // host copies of  b, c,d,soma
	int *d_a, *d_b, *d_c,*d_d; // device copies of a, b, c
	int *soma_d ; 
  int size = N * sizeof(int);
	int i;


	// Alloc space for device copies of a, b, c
	cudaMalloc((void **)&d_a, size);
	cudaMalloc((void **)&d_b, size);
	cudaMalloc((void **)&d_c, size);
  cudaMalloc((void **)&d_d, size);

  cudaMalloc((void **)&soma_d, size);


	srand(time(NULL));
	
	// Alloc space for host copies of a, b, c and setup input values
	b = (int *)malloc(size); random_ints(b, N);
  c = (int*)malloc(size) ; random_ints(c,N);
  d = (int*)malloc(size) ; random_ints(d,N);

	
  soma = (int *)malloc(size);
	
	
  
	// Copy inputs to device
	
	cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);
  cudaMemcpy(d_c, c, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_d, d, size, cudaMemcpyHostToDevice);
	
	// Launch add() kernel on GPU with N blocks
	FazTudoInt<<<N,1>>>(d_a, d_b, d_c,d_d);
	
	// Copy result back to host
	cudaMemcpy(soma, d_a, size, cudaMemcpyDeviceToHost);
	
  

	for (i = 0; i< N-1; i++){
		printf(">>%d,",soma[i]); //'soma' e equivalente a 'a' no execicio 
	}
	printf("==%d\n",soma[i]);


	// Cleanup
	 free(b); free(c);free(d);
	cudaFree(d_a); cudaFree(d_b); cudaFree(d_c); cudaFree(d_d);
	
	
	return 0;
	}
